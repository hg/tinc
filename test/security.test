#!/bin/sh

# shellcheck source=testlib.sh
. "${0%/*}/testlib.sh"

echo [STEP] Skip this test if tools are missing

which nc >/dev/null || exit "$EXIT_SKIP_TEST"

which timeout >/dev/null || {
  which gtimeout >/dev/null || exit "$EXIT_SKIP_TEST"
  alias timeout=gtimeout
}

# usage: splice protocol_version
splice() {
  ./splice foo localhost 32754 bar localhost 32755 "$1"
}

# usage: send_with_timeout "data to send" "data expected to receive"
send_with_timeout() {
  data=$1
  expected=$3

  result=$(
    (
      sleep 2
      printf "%s\n" "$data"
    ) | timeout 5 nc localhost 32754
  ) && exit 1

  test $? = "$EXIT_TIMEOUT"

  if [ -z "$expected" ]; then
    test -z "$result"
  else
    echo "$result" | grep -q "^$expected"
  fi
}

echo [STEP] Initialize two nodes

tinc foo <<EOF
init foo
set DeviceType dummy
set Port 32754
set Address localhost
set PingTimeout 1
set AutoConnect no
EOF

tinc bar <<EOF
init bar
set DeviceType dummy
set Port 32755
set PingTimeout 1
set MaxTimeout 1
set ExperimentalProtocol no
set AutoConnect no
EOF

create_script foo tinc-up
create_script bar tinc-up

echo [STEP] Exchange host config files

tinc foo export | tinc bar exchange | tinc foo import
start_tinc foo
start_tinc bar

wait_script foo tinc-up
wait_script bar tinc-up

echo "[STEP] No ID sent by responding node if we don't send an ID first, before the timeout"
send_with_timeout "0 bar 17.7" ""

echo [STEP] ID sent if initiator sends first, but still tarpitted
send_with_timeout "0 bar 17.7" "0 foo 17.7"

echo [STEP] No invalid IDs allowed
send_with_timeout "0 foo 17.7" ""
send_with_timeout "0 baz 17.7" ""

echo [STEP] No NULL METAKEYs allowed
data="0 foo 17.0\n1 0 672 0 0 834188619F4D943FD0F4B1336F428BD4AC06171FEABA66BD2356BC9593F0ECD643F0E4B748C670D7750DFDE75DC9F1D8F65AB1026F5ED2A176466FBA4167CC567A2085ABD070C1545B180BDA86020E275EA9335F509C57786F4ED2378EFFF331869B856DDE1C05C461E4EECAF0E2FB97AF77B7BC2AD1B34C12992E45F5D1254BBF0C3FB224ABB3E8859594A83B6CA393ED81ECAC9221CE6BC71A727BCAD87DD80FC0834B87BADB5CB8FD3F08BEF90115A8DF1923D7CD9529729F27E1B8ABD83C4CF8818AE10257162E0057A658E265610B71F9BA4B365A20C70578FAC65B51B91100392171BA12A440A5E93C4AA62E0C9B6FC9B68F953514AAA7831B4B2C31C4\n"
send_with_timeout "$data" "" # Not even the ID should be sent when the first packet contains illegal data

echo [STEP] No splicing allowed

stop_tinc bar
tinc bar del ExperimentalProtocol

create_script bar tinc-up
start_tinc bar
wait_script bar tinc-up

splice 17.7 &
sleep 5

require_nodes foo 1
require_nodes bar 1

kill $!

stop_tinc bar
stop_tinc foo

echo [STEP] Test splicing again with legacy protocol

tinc foo set ExperimentalProtocol no
tinc bar set ExperimentalProtocol no

create_script foo tinc-up

start_tinc foo
start_tinc bar

wait_script foo tinc-up
wait_script bar tinc-up

splice 17.0 &
sleep 5

require_nodes foo 1
require_nodes bar 1

kill $!
