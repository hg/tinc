name: Test

on:
  push:
    branches:
      - master
      - "1.1"
    tags:
      - "release-*"

  pull_request:
    types:
      - opened
      - synchronize

jobs:
  code-style:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install code formatting tools
        run: |
          sudo apt-get install -y astyle shellcheck
          curl -o ~/shfmt -L 'https://github.com/mvdan/sh/releases/download/v3.3.0/shfmt_v3.3.0_linux_amd64'
          chmod 755 ~/shfmt

      - name: Check code formatting
        run: |
          shopt -s globstar
          ! astyle --options=.astylerc --dry-run --formatted ./**/*.[ch] | grep '^Formatted'

      - name: Check test scripts formatting
        run: ~/shfmt -d -i 2 -s test/testlib.sh.in test/*.test

  linux:
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        compiler: [clang, gcc]
        legacy_protocol: ["", --disable-legacy-protocol]
      fail-fast: false

    runs-on: ${{ matrix.os }}
    env:
      CC: ${{ matrix.compiler }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install build deps
        run: >
          sudo apt-get install -y --no-install-{recommends,suggests}
          zlib1g-dev
          liblzo2-dev
          libncurses-dev
          libreadline-dev
          libminiupnpc-dev
          libvdeplug-dev
          texinfo
          netcat
          procps

      - name: Install OpenSSL
        run: sudo apt-get install -y libssl-dev
        if: ${{ matrix.legacy_protocol == '' }}

      - name: Configure project
        run: |
          autoreconf -fsi
          ./configure --enable-{miniupnpc,uml,vde} ${{ matrix.legacy_protocol }}

      - name: Compile project
        run: make -j$(nproc)

      - name: Run tests
        # root is required for some tests
        run: sudo make check-recursive VERBOSE=1

      - name: Archive test results
        run: sudo tar -c -z -f test-results.tar.gz test/
        if: always()

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: tests_${{ runner.os }}_${{ matrix.os }}_${{ matrix.compiler }}_${{ matrix.legacy_protocol }}
          path: test-results.tar.gz
        if: always()

  deb-build:
    if: startsWith(github.ref, 'refs/tags/release-')
    needs: linux

    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install build deps
        run: >
          sudo apt-get install -y --no-install-{recommends,suggests}
          devscripts
          git-buildpackage
          dh-make
          texinfo
          libssl-dev
          zlib1g-dev
          liblzo2-dev
          libncurses-dev
          libreadline-dev
          libminiupnpc-dev

      - name: Configure project
        run: autoreconf -fsi

      - name: Prepare debian directory
        run: bash .github/workflows/deb/prepare
        env:
          JOB_DISTRIBUTION: ${{ matrix.os }}

      - name: Build deb package
        run: dpkg-buildpackage -d -us -uc

      - name: Upload packages
        uses: actions/upload-artifact@v2
        with:
          name: deb-${{ matrix.os }}
          path: "*.deb"

  deb-publish:
    needs: deb-build

    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Download built packages
        uses: actions/download-artifact@v2
        with:
          name: deb-${{ matrix.os }}

      - name: Install package
        run: apt install -y ./*.deb

      - name: Prepare tinc configs
        run: |
          set -eu
          sudo mkdir -p /etc/tinc/test/hosts
          sudo tinc -b -n test generate-ed25519-keys
          echo "Name test" | sudo tee /etc/tinc/test/tinc.conf

      - name: Enable and start tincd
        run: |
          sudo systemctl start tinc@test
          sudo tinc -n test dump reachable nodes

      - name: Publish deb package
        uses: softprops/action-gh-release@v1
        with:
          files: "*.deb"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  macos:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        legacy_protocol: ["", --disable-legacy-protocol]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install build deps
        run: brew install coreutils netcat automake lzo miniupnpc

      - name: Configure project
        run: |
          autoreconf -fsi
          ./configure --with-openssl=/usr/local/opt/openssl@1.1 --enable-{tunemu,miniupnpc} ${{ matrix.legacy_protocol }}

      - name: Compile project
        run: make -j$(sysctl -n hw.ncpu)

      - name: Run tests
        run: make check-recursive VERBOSE=1

      - name: Archive test results
        run: sudo tar -c -z -f test-results.tar.gz test/
        if: always()

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: tests_${{ runner.os }}_${{ matrix.legacy_protocol }}
          path: test-results.tar.gz
        if: always()

  windows:
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        legacy_protocol: ["", --disable-legacy-protocol]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install msys2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          # https://packages.msys2.org/package/
          install: >-
            base-devel
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-lzo2
            mingw-w64-x86_64-ncurses
            mingw-w64-x86_64-miniupnpc
            git
            netcat
            procps

      - name: Configure project
        shell: msys2 {0}
        run: |
          autoreconf -fsi
          ./configure --enable-miniupnpc --disable-readline --with-curses-include=/mingw64/include/ncurses ${{ matrix.legacy_protocol }}

      - name: Compile project
        shell: msys2 {0}
        run: make -j$(nproc)

      - name: Run tests
        shell: msys2 {0}
        run: make check-recursive VERBOSE=1

      - name: Archive test results
        shell: msys2 {0}
        run: tar -c -z -f test-results.tar.gz test/
        if: always()

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: tests_${{ runner.os }}_${{ matrix.legacy_protocol }}
          path: test-results.tar.gz
        if: always()
